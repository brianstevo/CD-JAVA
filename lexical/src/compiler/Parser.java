import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

import javax.xml.bind.ValidationEvent;

public class Parser {
	 ArrayList<Token> tokens;
	Parser(ArrayList<Token> tokens) {
	        this.tokens = tokens;
	    }
	
	
	public boolean isValid() {
		HashMap<Integer , HashMap<String,String>> parserTable=new HashMap<>();
		parserTable.put(0, new HashMap<String,String>() {{put("INT","S 2");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","1");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
//		System.out.println(parserTable.get(0).get("PRINT"));
		parserTable.put(1, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","A");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(2, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","S 3");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(3, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","S 4");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(4, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","S 5");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(5, new HashMap<String,String>() {{put("INT","S 12");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","S 7");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","S 11");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","S 13");put("$","NULL");put("S","NULL");put("CODE","6");put("DECL","8");put("IFSTMT","NULL");put("INCODE","9");put("TYPE","10");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(6, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","R 1");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(7, new HashMap<String,String>() {{put("INT","S 12");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","S 7");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","S 11");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","S 13");put("$","NULL");put("S","NULL");put("CODE","14");put("DECL","8");put("IFSTMT","NULL");put("INCODE","9");put("TYPE","10");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(8, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","S 16");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","15");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(9, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","R 4");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","R 4");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(10, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","S 18");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","17");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(11, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","S 19");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(12, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","R 25");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(13, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","R 26");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(14, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","S 20");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(15, new HashMap<String,String>() {{put("INT","S 12");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","S 7");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","S 11");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","S 13");put("$","NULL");put("S","NULL");put("CODE","21");put("DECL","8");put("IFSTMT","NULL");put("INCODE","9");put("TYPE","10");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(16, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","S 22");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(17, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","S 23");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(18, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","R 7");put("IDENTIFIER","NULL");put("COMMA","S 24");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(19, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","S 25");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(20, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","R 2");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","R 2");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(21, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","R 3");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","R 3");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(22, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","S 30");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","S 31");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","26");put("RELOP","NULL");put("E","27");put("T","28");put("F","29");}});
		parserTable.put(23, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","R 5");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(24, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","S 18");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","32");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(25, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","S 33");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(26, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","S 34");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(27, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","S 36");put("MINUS","S 37");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","S 38");put("GREATERTHANOREQUALTO","S 39");put("LESSERTHAN","S 40");put("GREATERTHAN","S 41");put("EQUALTO","S 42");put("NOTEQUALTO","S 43");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","35");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(28, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","R 13");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","R 13");put("MINUS","R 13");put("MULTIPLY","S 44");put("DIVIDE","S 45");put("LESSTHANOREQUALTO","R 13");put("GREATERTHANOREQUALTO","R 13");put("LESSERTHAN","R 13");put("GREATERTHAN","R 13");put("EQUALTO","R 13");put("NOTEQUALTO","R 13");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","40");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(29, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","R 16");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","R 16");put("MINUS","R 16");put("MULTIPLY","R 16");put("DIVIDE","R 16");put("LESSTHANOREQUALTO","R 16");put("GREATERTHANOREQUALTO","R 16");put("LESSERTHAN","R 16");put("GREATERTHAN","R 16");put("EQUALTO","R 16");put("NOTEQUAL10","R 16");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","41");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(30, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","R 17");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","R 17");put("MINUS","R 17");put("MULTIPLY","R 17");put("DIVIDE","R 17");put("LESSTHANOREQUALTO","R 17");put("GREATERTHANOREQUALTO","R 17");put("LESSERTHAN","R 17");put("GREATERTHAN","R 17");put("EQUALTO","R 17");put("NOTEQUALTO","R 17");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(31, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","R 18");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","R 18");put("MINUS","R 18");put("MULTIPLY","R 18");put("DIVIDE","R 18");put("LESSTHANOREQUALTO","R 18");put("GREATERTHANOREQUALTO","R 18");put("LESSERTHAN","R 18");put("GREATERTHAN","R 18");put("EQUALTO","R 18");put("NOTEQUALTO","R 18");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(32, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","R 6");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(33, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","R 9");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","R 9");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(34, new HashMap<String,String>() {{put("INT","R 8");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","R 8");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","R 8");put("LITERAL","NULL");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","R 8");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(35, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","S 30");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","S 31");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","46");put("T","28");put("F","29");}});
		parserTable.put(36, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","S 30");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","S 31");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","47");put("F","29");}});
		parserTable.put(37, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","S 30");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","S 31");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","48");put("F","29");}});
		parserTable.put(38, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","R 19");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","R 19");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(39, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","R 20");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","R 20");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(40, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","R 21");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","R 21");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(41, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","R 22");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","R 22");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(42, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","R 23");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","R 23");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(43, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","R 24");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","R 24");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(44, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","S 31");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","S 31");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","49");}});
		parserTable.put(45, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","NULL");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","S 31");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","S 31");put("PLUS","NULL");put("MINUS","NULL");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","50");}});
		parserTable.put(46, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","R 10");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","S 36");put("MINUS","S 37");put("MULTIPLY","NULL");put("DIVIDE","NULL");put("LESSTHANOREQUALTO","NULL");put("GREATERTHANOREQUALTO","NULL");put("LESSERTHAN","NULL");put("GREATERTHAN","NULL");put("EQUALTO","NULL");put("NOTEQUALTO","NULL");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(47, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","R 11");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","R 11");put("MINUS","R 11");put("MULTIPLY","S 44");put("DIVIDE","S 44");put("LESSTHANOREQUALTO","R 11");put("GREATERTHANOREQUALTO","R 11");put("LESSERTHAN","R 11");put("GREATERTHAN","R 11");put("EQUALTO","R 11");put("NOTEQUALTO","R 11");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(48, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","R 12");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","R 12");put("MINUS","R 12");put("MULTIPLY","S 44");put("DIVIDE","S 45");put("LESSTHANOREQUALTO","R 12");put("GREATERTHANOREQUALTO","R 12");put("LESSERTHAN","R 12");put("GREATERTHAN","R 12");put("EQUALTO","R 12");put("NOTEQUALTO","R 12");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(49, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","R 14");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","R 14");put("MINUS","R 14");put("MULTIPLY","R 14");put("DIVIDE","R 14");put("LESSTHANOREQUALTO","R 14");put("GREATERTHANOREQUALTO","R 14");put("LESSERTHAN","R 14");put("GREATERTHAN","R 14");put("EQUALTO","R 14");put("NOTEQUALTO","R 14");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
		parserTable.put(50, new HashMap<String,String>() {{put("INT","NULL");put("MAIN","NULL");put("LEFT_PARAN","NULL");put("RIGHT_PARAN","R 15");put("BEGIN","NULL");put("END","NULL");put("SEMICOLON","NULL");put("IDENTIFIER","NULL");put("COMMA","NULL");put("IF","NULL");put("PRINTF","NULL");put("LITERAL","NULL");put("PLUS","R 15");put("MINUS","R 15");put("MULTIPLY","R 15");put("DIVIDE","R 15");put("LESSTHANOREQUALTO","R 15");put("GREATERTHANOREQUALTO","R 15");put("LESSERTHAN","R 15");put("GREATERTHAN","R 15");put("EQUALTO","R 15");put("NOTEQUALTO","R 15");put("FLOAT","NULL");put("$","NULL");put("S","NULL");put("CODE","NULL");put("DECL","NULL");put("IFSTMT","NULL");put("INCODE","NULL");put("TYPE","NULL");put("LV","NULL");put("COND","NULL");put("RELOP","NULL");put("E","NULL");put("T","NULL");put("F","NULL");}});
	
	Map<Integer,String> grammar=new HashMap<Integer,String>()
	{{ 
		put(1,"S"); 
		put(2,"CODE");
		put(3,"CODE");
		put(4,"CODE");
		put(5,"DECL");
		put(6,"LV");
		put(7,"LV");
		put(8,"IFSTMT");
		put(9,"INCODE");
		put(10,"COND");
		put(11,"E");
		put(12,"E");
		put(13,"E");
		put(14,"T");
		put(15,"T");
		put(16,"T");
		put(17,"F");
		put(18,"F");
		put(19,"RELOP");
		put(20,"RELOP");
		put(21,"RELOP");
		put(22,"RELOP");
		put(23,"RELOP");
		put(24,"RELOP");
		put(25,"TYPE");
		put(26,"TYPE");
		
		}};
	
	ArrayList<Integer> value=new ArrayList<Integer>();
	value.addAll(Arrays.asList(10,6,6,2,6,6,2,8,8,6,6,6,2,6,6,2,2,2,2,2,2,2,2,2,2,2));
	
//	System.out.println("line are");
//	for(Token token:tokens) {
//		System.out.println(token);
//	}
	ArrayList<String> inputTokens=new ArrayList<String>();
	for(Token token:tokens) {
		inputTokens.add(token.type.toString());
	}
	inputTokens.add("$");
	Stack<String> table=new Stack<String>();
	table.push("$");
	table.push("0");

	int top=1;
	int i=0,flag=0;
	int j=inputTokens.size();
//	System.out.println(j);
	String str;
	String val[];
	while (i<j){
	 str=parserTable.get(Integer.parseInt(table.peek())).get(inputTokens.get(i));
	 if(str.equals("NULL")) {
		 System.out.println("Error at line: "+tokens.get(i).line);
		 
		 break;
	 }
	 else if(str.equals("A")) {
		 flag=1;
		 break;
	 }
	 else {
		 val=str.split(" ");
	 switch(val[0]) {
	 case "S":
//		 System.out.println("Shift");
		 table.push(inputTokens.get(i));
		 table.push(val[1]);
//		 System.out.println(table);
//		 System.out.println(inputTokens.get(i));
		 top=top+2;
		 i++;
		 break;
	 case "R":
//		 System.out.println("Reduce");
		 int sv=(int)value.get(Integer.parseInt(val[1])-1);
		 top=top-sv;

		 for(int k=0;k<sv;k++)
			 table.pop();
//		 System.out.println(table);
//		 System.out.println(inputTokens.get(i));
		 table.push(grammar.get(Integer.parseInt(val[1])));
//		 System.out.println(table);
		 top=top+1;
		 table.push(parserTable.get(Integer.parseInt(table.get(top-1))).get(table.get(top)));
//		 System.out.println(table);

		 top=top+1;
		 break;
	 
	 }
	 
	}
	
	}
if(flag==1)
	return true;
else
	return false;
	
	}

}